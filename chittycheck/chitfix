#!/bin/bash

# ChitFix - Universal Fix Command for ChittyOS
# Usage: chitfix [target] - Fixes any system component automatically

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
RESET='\033[0m'
DIM='\033[2m'

# Get the target to fix
TARGET="${1:-all}"
VERBOSE="${2:-}"

# Base directories
CHITTY_BASE="/Users/nb/.claude/projects/-"
CURRENT_DIR="$PWD"

# ============================================
# HELPER FUNCTIONS
# ============================================

log() {
    local level="$1"
    local message="$2"

    case "$level" in
        "success")
            echo -e "${GREEN}✅${RESET} $message"
            ;;
        "fixing")
            echo -e "${BLUE}🔧${RESET} $message"
            ;;
        "warning")
            echo -e "${YELLOW}⚠️${RESET}  $message"
            ;;
        "error")
            echo -e "${RED}❌${RESET} $message"
            ;;
        "info")
            echo -e "${CYAN}ℹ️${RESET}  $message"
            ;;
    esac
}

header() {
    echo -e "${CYAN}${BOLD}════════════════════════════════════════════════════════════════════${RESET}"
    echo -e "${CYAN}${BOLD}   🔧 CHITFIX - $1${RESET}"
    echo -e "${CYAN}${BOLD}════════════════════════════════════════════════════════════════════${RESET}"
    echo ""
}

# ============================================
# FIX FUNCTIONS
# ============================================

fix_id() {
    log "fixing" "ChittyID System..."

    # Create .env with ChittyID token
    if [ ! -f ".env" ] || ! grep -q "CHITTY_ID_TOKEN" .env; then
        echo "CHITTY_ID_TOKEN=chitty-dev-token-2025" >> .env
        log "success" "Added ChittyID token to .env"
    fi

    # Remove local ID generation patterns
    if [ -f "package.json" ]; then
        # Check for uuid, nanoid, etc.
        if grep -q "uuid\|nanoid" package.json; then
            log "warning" "Found local ID libraries - consider removing:"
            log "info" "npm uninstall uuid nanoid"
        fi
    fi

    # Create ChittyID client if needed
    if [ ! -f "chittyid-client.js" ] && [ -f "package.json" ]; then
        cat > chittyid-client.js << 'EOF'
// ChittyID Service Client
const CHITTYID_SERVICE = 'https://id.chitty.cc';

async function mintChittyID(domain, subtype, metadata = {}) {
  const response = await fetch(`${CHITTYID_SERVICE}/v1/mint`, {
    method: 'POST',
    headers: {
      'authorization': `Bearer ${process.env.CHITTY_ID_TOKEN}`,
      'content-type': 'application/json'
    },
    body: JSON.stringify({ domain, subtype, metadata })
  });

  const { chitty_id } = await response.json();
  return chitty_id;
}

module.exports = { mintChittyID };
EOF
        log "success" "Created chittyid-client.js"
    fi

    # Create project ChittyID
    if [ ! -f ".chittyos/project.id" ]; then
        mkdir -p .chittyos
        echo "CHITTY-PROJECT-$(date +%s)-$(openssl rand -hex 4)" > .chittyos/project.id
        log "success" "Created project ChittyID"
    fi
}

fix_git() {
    log "fixing" "Git System..."

    # Initialize git
    if [ ! -d ".git" ]; then
        git init >/dev/null 2>&1
        log "success" "Initialized git repository"
    fi

    # Create .gitignore
    if [ ! -f ".gitignore" ]; then
        cat > .gitignore << 'EOF'
node_modules/
.env
.env.local
.wrangler/
dist/
build/
*.log
.DS_Store
coverage/
.vscode/
.idea/
*.swp
*.swo
.cache/
EOF
        log "success" "Created .gitignore"
    fi

    # Add .env to .gitignore if missing
    if [ -f ".env" ] && ! grep -q "^.env$" .gitignore 2>/dev/null; then
        echo ".env" >> .gitignore
        log "success" "Added .env to .gitignore"
    fi

    # Create feature branch if on main
    CURRENT_BRANCH=$(git branch --show-current 2>/dev/null)
    if [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
        git checkout -b "feature/chitfix-$(date +%Y%m%d)" >/dev/null 2>&1
        log "success" "Created feature branch"
    fi

    # Stash uncommitted changes if too many
    UNCOMMITTED=$(git status --porcelain 2>/dev/null | wc -l)
    if [ "$UNCOMMITTED" -gt 50 ]; then
        git stash push -m "ChitFix auto-stash $(date)" >/dev/null 2>&1
        log "success" "Stashed $UNCOMMITTED uncommitted files"
    fi
}

fix_data() {
    log "fixing" "Data System..."

    # Create .env
    if [ ! -f ".env" ]; then
        cat > .env << 'EOF'
# ChittyID Service Configuration (REQUIRED)
CHITTY_ID_TOKEN=chitty-dev-token-2025

# ChittyOS Integration
CHITTYOS_ACCOUNT_ID=bbf9fcd845e78035b7a135c481e88541

# Database
DATABASE_URL=postgresql://localhost:5432/myapp
EOF
        log "success" "Created .env with data configuration"
    fi

    # Create .env.example
    if [ ! -f ".env.example" ]; then
        cat > .env.example << 'EOF'
# ChittyID Service Configuration (REQUIRED)
CHITTY_ID_TOKEN=your_chittyid_token_here

# ChittyOS Integration
CHITTYOS_ACCOUNT_ID=your_account_id_here

# Database
DATABASE_URL=postgresql://localhost:5432/myapp
EOF
        log "success" "Created .env.example"
    fi

    # Link to data repositories
    mkdir -p .chittyos
    echo "$HOME/.claude/projects/chittychat-data" > .chittyos/data.path
    echo "$HOME/.claude/projects/chittyos-data" > .chittyos/system.path
    log "success" "Linked data repositories"
}

fix_security() {
    log "fixing" "Security System..."

    # Fix file permissions
    find . -type f -perm /022 -not -path "./.git/*" -not -path "*/node_modules/*" 2>/dev/null | while read file; do
        chmod 644 "$file"
        log "success" "Fixed permissions: $(basename "$file")"
    done

    # Remove hardcoded secrets
    if [ -f "package.json" ]; then
        # Scan for secrets in code
        FILES_WITH_SECRETS=$(grep -l "api_key.*=.*['\"].*['\"]" --include="*.js" --include="*.ts" -r . 2>/dev/null | grep -v node_modules)

        for file in $FILES_WITH_SECRETS; do
            log "warning" "Found potential secret in: $file"
            # Could auto-replace but safer to warn
        done
    fi

    # Ensure .env is gitignored
    if [ -f ".env" ] && [ -f ".gitignore" ]; then
        if ! grep -q "^.env$" .gitignore; then
            echo ".env" >> .gitignore
            log "success" "Added .env to .gitignore"
        fi
    fi

    # Create secure example files
    if [ -f ".env" ] && [ ! -f ".env.vault" ]; then
        echo "# Encrypted with 1Password CLI" > .env.vault
        log "info" "Consider using 1Password for secrets: op document create .env"
    fi
}

fix_schema() {
    log "fixing" "Schema System..."

    # Create CLAUDE.md
    if [ ! -f "CLAUDE.md" ]; then
        PROJECT_NAME=$(basename "$PWD")
        cat > CLAUDE.md << EOF
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with this project.

## Project Overview
$PROJECT_NAME - Part of the ChittyOS ecosystem

## Slash Commands (EXECUTE IMMEDIATELY)
- \`/chittycheck\` - Run ChittyID compliance check
- \`/status\` - System status
- \`/deploy\` - Smart deployment
- \`/commit\` - Commit with ChittyID

## ChittyID Integration
ALL IDs must be minted from https://id.chitty.cc
NO local generation allowed - SERVICE OR FAIL

## Development
\`\`\`bash
npm install
npm run dev
npm test
\`\`\`

Generated by ChitFix on $(date)
EOF
        log "success" "Created CLAUDE.md"
    fi

    # Create README.md if missing
    if [ ! -f "README.md" ]; then
        PROJECT_NAME=$(basename "$PWD")
        echo "# $PROJECT_NAME" > README.md
        echo "" >> README.md
        echo "Part of ChittyOS Framework" >> README.md
        log "success" "Created README.md"
    fi

    # Update package.json with proper structure
    if [ -f "package.json" ]; then
        # Ensure scripts exist
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json'));
        pkg.scripts = pkg.scripts || {};
        pkg.scripts.dev = pkg.scripts.dev || 'node index.js';
        pkg.scripts.test = pkg.scripts.test || 'echo \"No tests\"';
        pkg.scripts.chittycheck = pkg.scripts.chittycheck || 'chittycheck';
        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        " 2>/dev/null && log "success" "Updated package.json scripts"
    fi
}

fix_registry() {
    log "fixing" "Registry System..."

    # Create registry config
    mkdir -p .chittyos
    cat > .chittyos/registry.json << EOF
{
  "service": "$(basename "$PWD")",
  "url": "https://registry.chitty.cc",
  "registered": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
    log "success" "Created registry configuration"

    # Test registry connection
    if curl -s -o /dev/null -w "%{http_code}" https://registry.chitty.cc/health 2>/dev/null | grep -q "200\|404"; then
        log "success" "Registry service reachable"
    else
        log "warning" "Registry service unreachable - check network"
    fi
}

fix_services() {
    log "fixing" "Service Connections..."

    # Update service URLs in code
    if [ -f "package.json" ]; then
        # Fix any incorrect service URLs
        find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.json" \) -not -path "*/node_modules/*" 2>/dev/null | while read file; do
            # Fix common URL mistakes
            sed -i '' 's/http:\/\/id\.chitty\.cc/https:\/\/id.chitty.cc/g' "$file" 2>/dev/null
            sed -i '' 's/http:\/\/registry\.chitty\.cc/https:\/\/registry.chitty.cc/g' "$file" 2>/dev/null
        done
        log "success" "Fixed service URLs to use HTTPS"
    fi
}

fix_deps() {
    log "fixing" "Dependencies..."

    if [ -f "package.json" ]; then
        # Install missing dependencies
        if [ ! -d "node_modules" ]; then
            npm install >/dev/null 2>&1
            log "success" "Installed dependencies"
        fi

        # Audit and fix
        npm audit fix --force >/dev/null 2>&1
        log "success" "Fixed dependency vulnerabilities"

        # Remove unused
        if command -v depcheck >/dev/null 2>&1; then
            depcheck --ignores="@types/*" >/dev/null 2>&1
            log "info" "Run 'npx depcheck' to find unused dependencies"
        fi
    fi
}

fix_claude() {
    log "fixing" "Claude Integration..."

    # Ensure CLAUDE.md exists
    fix_schema

    # Check Claude settings
    CLAUDE_SETTINGS="$HOME/.claude/settings.json"
    if [ ! -f "$CLAUDE_SETTINGS" ]; then
        log "warning" "Claude Code settings not found"
        log "info" "Open Claude Code to initialize settings"
    fi

    # Ensure MCP servers configured
    if ! ps aux | grep -q "mcp.*server" | grep -v grep; then
        log "info" "Start MCP servers: $CHITTY_BASE/chittychat/start-mcp-servers.sh"
    fi
}

fix_all() {
    log "info" "Running complete system fix..."

    fix_id
    fix_git
    fix_data
    fix_security
    fix_schema
    fix_registry
    fix_services
    [ -f "package.json" ] && fix_deps
    fix_claude
}

# ============================================
# MAIN LOGIC
# ============================================

# Show header
case "$TARGET" in
    all)
        header "COMPLETE SYSTEM FIX"
        ;;
    *)
        header "FIX: ${TARGET^^}"
        ;;
esac

# Route to appropriate fix function
case "$TARGET" in
    id|chittyid|identity)
        fix_id
        ;;
    git|version|vcs)
        fix_git
        ;;
    data|database|db)
        fix_data
        ;;
    security|sec|perms|permissions)
        fix_security
        ;;
    schema|docs|documentation|claude)
        fix_schema
        ;;
    registry|reg|services)
        fix_registry
        ;;
    service|services|urls)
        fix_services
        ;;
    deps|dependencies|npm|packages)
        fix_deps
        ;;
    claude|mcp|ai)
        fix_claude
        ;;
    env|environment)
        fix_data  # .env is part of data system
        ;;
    all|everything|full)
        fix_all
        ;;
    help|--help|-h)
        echo -e "${BOLD}USAGE:${RESET}"
        echo "  chitfix [target]"
        echo ""
        echo -e "${BOLD}TARGETS:${RESET}"
        echo "  ${GREEN}all${RESET}        - Fix everything"
        echo "  ${GREEN}id${RESET}         - Fix ChittyID system"
        echo "  ${GREEN}git${RESET}        - Fix git repository"
        echo "  ${GREEN}data${RESET}       - Fix data/env configuration"
        echo "  ${GREEN}security${RESET}   - Fix security issues"
        echo "  ${GREEN}schema${RESET}     - Fix documentation/CLAUDE.md"
        echo "  ${GREEN}registry${RESET}   - Fix service registry"
        echo "  ${GREEN}services${RESET}   - Fix service URLs"
        echo "  ${GREEN}deps${RESET}       - Fix dependencies"
        echo "  ${GREEN}claude${RESET}     - Fix Claude integration"
        echo ""
        echo -e "${BOLD}EXAMPLES:${RESET}"
        echo "  chitfix all        # Fix everything"
        echo "  chitfix id         # Fix ChittyID issues"
        echo "  chitfix security   # Fix permissions and secrets"
        echo "  chitfix git        # Fix git repository"
        echo ""
        exit 0
        ;;
    *)
        # Try to intelligently fix based on keyword
        log "info" "Attempting intelligent fix for: $TARGET"

        # Check what might be broken
        if echo "$TARGET" | grep -qi "perm\|sec\|safe"; then
            fix_security
        elif echo "$TARGET" | grep -qi "env\|config\|data"; then
            fix_data
        elif echo "$TARGET" | grep -qi "git\|commit\|branch"; then
            fix_git
        elif echo "$TARGET" | grep -qi "id\|chitty\|uuid"; then
            fix_id
        elif echo "$TARGET" | grep -qi "doc\|claude\|md"; then
            fix_schema
        elif echo "$TARGET" | grep -qi "dep\|npm\|package"; then
            fix_deps
        else
            log "warning" "Unknown target: $TARGET"
            log "info" "Running general fixes..."
            fix_id
            fix_git
            fix_data
            fix_security
            fix_schema
        fi
        ;;
esac

echo ""

# Run quick validation
echo -e "${BOLD}🔍 VALIDATION${RESET}"
echo "────────────────────────"

# Quick checks
ISSUES=0

[ ! -f ".env" ] && ((ISSUES++)) && log "error" ".env missing"
[ ! -f ".gitignore" ] && ((ISSUES++)) && log "error" ".gitignore missing"
[ ! -f "CLAUDE.md" ] && ((ISSUES++)) && log "error" "CLAUDE.md missing"
[ ! -d ".git" ] && ((ISSUES++)) && log "error" "Git not initialized"

if [ $ISSUES -eq 0 ]; then
    log "success" "All basic checks passed!"
else
    log "warning" "$ISSUES issues remain"
    log "info" "Run 'chitfix all' for complete fix"
fi

echo ""
echo -e "${DIM}ChitFix - Part of ChittyOS Framework${RESET}"
echo -e "${DIM}Run 'chittycheck' to validate fixes${RESET}"