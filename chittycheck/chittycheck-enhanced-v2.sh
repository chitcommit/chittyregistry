#!/bin/bash

# ChittyCheck Enhanced v2 - Comprehensive Systems Checkup with Auto-Fix
# Validates ChittyID compliance, service integration, session management, and system health

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BLUE='\033[0;34m'
BOLD='\033[1m'
RESET='\033[0m'
DIM='\033[2m'
WHITE='\033[0;37m'

# Tracking arrays for violations and fixes
declare -a VIOLATIONS=()
declare -a FIX_COMMANDS=()
declare -a WARNINGS=()
declare -a SUCCESS_ITEMS=()

# Flags
FIX_MODE=false
VERBOSE=false
QA_MODE=false
SECURITY_MODE=false
QUICK_MODE=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --fix|-f)
            FIX_MODE=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --qa|-q)
            QA_MODE=true
            shift
            ;;
        --security|-s)
            SECURITY_MODE=true
            shift
            ;;
        --quick)
            QUICK_MODE=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            shift
            ;;
    esac
done

# ============================================
# HELPER FUNCTIONS
# ============================================

add_violation() {
    local description="$1"
    local fix_command="$2"
    local category="${3:-General}"

    VIOLATIONS+=("[$category] $description")
    if [ -n "$fix_command" ]; then
        FIX_COMMANDS+=("$fix_command")
    fi
}

add_warning() {
    local description="$1"
    local suggestion="${2:-}"
    WARNINGS+=("$description")
    [ -n "$suggestion" ] && WARNINGS+=("  → $suggestion")
}

add_success() {
    local item="$1"
    SUCCESS_ITEMS+=("$item")
}

log_status() {
    local status="$1"
    local message="$2"
    local detail="${3:-}"

    case "$status" in
        "success")
            echo -e "${GREEN}✅${RESET} $message"
            add_success "$message"
            ;;
        "warning")
            echo -e "${YELLOW}⚠️${RESET}  $message"
            add_warning "$message" "$detail"
            ;;
        "error")
            echo -e "${RED}❌${RESET} $message"
            add_violation "$message" "$detail"
            ;;
        "info")
            echo -e "${CYAN}ℹ️${RESET}  $message"
            ;;
        "fix")
            echo -e "${BLUE}🔧${RESET} $message"
            ;;
    esac
}

# ============================================
# AUTO-FIX FUNCTIONS
# ============================================

fix_env_file() {
    if [ ! -f ".env" ]; then
        cat > .env << 'EOF'
# ChittyID Service Configuration (REQUIRED)
CHITTY_ID_TOKEN=chitty-dev-token-2025

# ChittyOS Integration
CHITTYOS_ACCOUNT_ID=bbf9fcd845e78035b7a135c481e88541
EOF
        log_status "fix" "Created .env file with default configuration"
        return 0
    fi
    return 1
}

fix_gitignore() {
    if [ ! -f ".gitignore" ]; then
        cat > .gitignore << 'EOF'
node_modules/
.env
.env.local
.wrangler/
dist/
build/
*.log
.DS_Store
coverage/
.vscode/
.idea/
*.swp
*.swo
.cache/
EOF
        log_status "fix" "Created .gitignore with standard patterns"
        return 0
    elif ! grep -q "^.env$" .gitignore 2>/dev/null; then
        echo ".env" >> .gitignore
        log_status "fix" "Added .env to .gitignore"
        return 0
    fi
    return 1
}

fix_claude_md() {
    if [ ! -f "CLAUDE.md" ]; then
        local project_name=$(basename "$PWD")
        cat > CLAUDE.md << EOF
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with this project.

## Project Overview
$project_name - Part of ChittyOS Framework

## Slash Commands (EXECUTE IMMEDIATELY)
- /chittycheck - Run ChittyID compliance check
- /status - System status
- /deploy - Smart deployment
- /commit - Commit with ChittyID

## ChittyID Integration
ALL IDs must be minted from https://id.chitty.cc
NO local generation allowed - SERVICE OR FAIL

## Development
\`\`\`bash
npm install
npm run dev
npm test
\`\`\`

Generated by ChittyCheck on $(date)
EOF
        log_status "fix" "Created CLAUDE.md with project instructions"
        return 0
    fi
    return 1
}

fix_git_init() {
    if [ ! -d ".git" ]; then
        git init >/dev/null 2>&1
        log_status "fix" "Initialized git repository"
        return 0
    fi
    return 1
}

fix_permissions() {
    local fixed=0
    find . -type f -perm /022 -not -path "./.git/*" -not -path "*/node_modules/*" 2>/dev/null | while read file; do
        chmod 644 "$file"
        log_status "fix" "Fixed permissions on $file"
        ((fixed++))
    done
    return $fixed
}

# ============================================
# MAIN VALIDATION LOGIC
# ============================================

echo -e "${CYAN}${BOLD}════════════════════════════════════════════════════════════════════${RESET}"
echo -e "${CYAN}${BOLD}   🔍 CHITTYCHECK v2.0 - SYSTEMS CHECKUP${RESET}"
[ "$FIX_MODE" = true ] && echo -e "${CYAN}${BOLD}   🔧 AUTO-FIX MODE ENABLED${RESET}"
echo -e "${CYAN}${BOLD}════════════════════════════════════════════════════════════════════${RESET}"
echo ""

# Score tracking
TOTAL_CHECKS=0
PASSED_CHECKS=0

# ============================================
# 1. CHITTYID VALIDATION
# ============================================
echo -e "${BOLD}🆔 CHITTYID VALIDATION${RESET}"
echo "────────────────────────"

((TOTAL_CHECKS++))
if [ -f ".env" ] && grep -q "CHITTY_ID_TOKEN" .env; then
    log_status "success" "ChittyID token configured"
    ((PASSED_CHECKS++))
else
    log_status "error" "ChittyID token not configured" "echo 'CHITTY_ID_TOKEN=your_token' >> .env"
    if [ "$FIX_MODE" = true ]; then
        fix_env_file && ((PASSED_CHECKS++))
    fi
fi

# Check for local ID generation
((TOTAL_CHECKS++))
LOCAL_ID_COUNT=$(grep -r "uuid\|nanoid\|Math.random.*toString\|crypto.randomUUID" --include="*.js" --include="*.ts" . 2>/dev/null | grep -v node_modules | wc -l)
if [ "$LOCAL_ID_COUNT" -eq 0 ]; then
    log_status "success" "No local ID generation detected"
    ((PASSED_CHECKS++))
else
    log_status "error" "$LOCAL_ID_COUNT instances of local ID generation found" "Replace with ChittyID service calls"
fi

echo ""

# ============================================
# 2. GIT SYSTEM
# ============================================
echo -e "${BOLD}🔀 GIT SYSTEM${RESET}"
echo "────────────────────────"

((TOTAL_CHECKS++))
if [ -d ".git" ]; then
    log_status "success" "Git repository initialized"
    ((PASSED_CHECKS++))

    # Check branch
    CURRENT_BRANCH=$(git branch --show-current 2>/dev/null)
    if [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
        log_status "warning" "Working on $CURRENT_BRANCH branch" "git checkout -b feature/your-feature"
    fi

    # Check uncommitted changes
    UNCOMMITTED=$(git status --porcelain 2>/dev/null | wc -l)
    if [ "$UNCOMMITTED" -gt 10 ]; then
        log_status "warning" "$UNCOMMITTED uncommitted files" "git add -A && git commit -m 'Save work'"
    fi
else
    log_status "error" "No git repository" "git init"
    if [ "$FIX_MODE" = true ]; then
        fix_git_init && ((PASSED_CHECKS++))
    fi
fi

echo ""

# ============================================
# 3. DATA SYSTEM
# ============================================
echo -e "${BOLD}💾 DATA SYSTEM${RESET}"
echo "────────────────────────"

((TOTAL_CHECKS++))
if [ -f ".env" ]; then
    log_status "success" ".env file exists"
    ((PASSED_CHECKS++))
else
    log_status "error" ".env file missing" "touch .env"
    if [ "$FIX_MODE" = true ]; then
        fix_env_file && ((PASSED_CHECKS++))
    fi
fi

((TOTAL_CHECKS++))
if [ -f ".gitignore" ] && grep -q "^.env$" .gitignore 2>/dev/null; then
    log_status "success" ".env properly gitignored"
    ((PASSED_CHECKS++))
else
    log_status "error" ".env not in .gitignore" "echo '.env' >> .gitignore"
    if [ "$FIX_MODE" = true ]; then
        fix_gitignore && ((PASSED_CHECKS++))
    fi
fi

((TOTAL_CHECKS++))
if [ -f "CLAUDE.md" ]; then
    log_status "success" "CLAUDE.md exists"
    ((PASSED_CHECKS++))
else
    log_status "error" "CLAUDE.md missing" "Create CLAUDE.md with project instructions"
    if [ "$FIX_MODE" = true ]; then
        fix_claude_md && ((PASSED_CHECKS++))
    fi
fi

echo ""

# ============================================
# 4. REGISTRY SYSTEM
# ============================================
echo -e "${BOLD}🔖 REGISTRY SYSTEM${RESET}"
echo "────────────────────────"

((TOTAL_CHECKS++))
if curl -s -o /dev/null -w "%{http_code}" https://registry.chitty.cc/health 2>/dev/null | grep -q "200\|404"; then
    log_status "success" "Registry service reachable"
    ((PASSED_CHECKS++))
else
    log_status "warning" "Registry service unreachable" "Check network connection"
fi

echo ""

# ============================================
# 5. SECURITY SYSTEM
# ============================================
echo -e "${BOLD}🔐 SECURITY SYSTEM${RESET}"
echo "────────────────────────"

# Check for hardcoded secrets
((TOTAL_CHECKS++))
SECRET_COUNT=$(grep -r "api_key\|password\|secret" --include="*.js" --include="*.ts" . 2>/dev/null | grep -v node_modules | grep -v example | wc -l)
if [ "$SECRET_COUNT" -eq 0 ]; then
    log_status "success" "No hardcoded secrets detected"
    ((PASSED_CHECKS++))
else
    log_status "error" "$SECRET_COUNT potential hardcoded secrets found" "Move secrets to .env file"
fi

# Check file permissions
((TOTAL_CHECKS++))
PERMISSION_ISSUES=$(find . -type f -perm /022 -not -path "./.git/*" -not -path "*/node_modules/*" 2>/dev/null | wc -l)
if [ "$PERMISSION_ISSUES" -eq 0 ]; then
    log_status "success" "File permissions secure"
    ((PASSED_CHECKS++))
else
    log_status "error" "$PERMISSION_ISSUES files with overly permissive permissions" "chmod 644 <files>"
    if [ "$FIX_MODE" = true ]; then
        fix_permissions
    fi
fi

# Check 1Password CLI
((TOTAL_CHECKS++))
if command -v op >/dev/null 2>&1; then
    if op whoami >/dev/null 2>&1; then
        log_status "success" "1Password CLI authenticated"
        ((PASSED_CHECKS++))
    else
        log_status "warning" "1Password CLI not authenticated" "op signin"
    fi
else
    log_status "warning" "1Password CLI not installed" "brew install 1password-cli"
fi

echo ""

# ============================================
# CALCULATE SCORE AND GRADE
# ============================================
PERCENTAGE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))

# Determine grade
if [ $PERCENTAGE -ge 95 ]; then
    GRADE="A+"
    GRADE_COLOR=$GREEN
elif [ $PERCENTAGE -ge 90 ]; then
    GRADE="A"
    GRADE_COLOR=$GREEN
elif [ $PERCENTAGE -ge 85 ]; then
    GRADE="B+"
    GRADE_COLOR=$GREEN
elif [ $PERCENTAGE -ge 80 ]; then
    GRADE="B"
    GRADE_COLOR=$YELLOW
elif [ $PERCENTAGE -ge 75 ]; then
    GRADE="C+"
    GRADE_COLOR=$YELLOW
elif [ $PERCENTAGE -ge 70 ]; then
    GRADE="C"
    GRADE_COLOR=$YELLOW
elif [ $PERCENTAGE -ge 60 ]; then
    GRADE="D"
    GRADE_COLOR=$RED
else
    GRADE="F"
    GRADE_COLOR=$RED
fi

# Determine overall status
if [ $PERCENTAGE -ge 80 ]; then
    STATUS="PASSED"
    STATUS_COLOR=$GREEN
elif [ $PERCENTAGE -ge 60 ]; then
    STATUS="PASSED WITH WARNINGS"
    STATUS_COLOR=$YELLOW
else
    STATUS="FAILED"
    STATUS_COLOR=$RED
fi

# ============================================
# VIOLATIONS SUMMARY
# ============================================
echo -e "${CYAN}${BOLD}════════════════════════════════════════════════════════════════════${RESET}"
echo -e "${CYAN}${BOLD}   📊 CHITTYCHECK SUMMARY${RESET}"
echo -e "${CYAN}${BOLD}════════════════════════════════════════════════════════════════════${RESET}"
echo ""

echo -e "${BOLD}Overall Score:${RESET} ${PERCENTAGE}% (${PASSED_CHECKS}/${TOTAL_CHECKS} checks passed)"
echo -e "${BOLD}Grade:${RESET} ${GRADE_COLOR}${GRADE}${RESET}"
echo -e "${BOLD}Status:${RESET} ${STATUS_COLOR}${STATUS}${RESET}"
echo ""

# Show violations if any
if [ ${#VIOLATIONS[@]} -gt 0 ]; then
    echo -e "${RED}${BOLD}❌ VIOLATIONS (${#VIOLATIONS[@]})${RESET}"
    echo "────────────────────────"
    for i in "${!VIOLATIONS[@]}"; do
        echo -e "  $((i+1)). ${VIOLATIONS[$i]}"
    done
    echo ""

    echo -e "${BLUE}${BOLD}🔧 FIX COMMANDS${RESET}"
    echo "────────────────────────"
    if [ "$FIX_MODE" = false ]; then
        echo -e "${CYAN}Run with --fix flag to auto-fix issues, or run these commands:${RESET}"
        echo ""
        for i in "${!FIX_COMMANDS[@]}"; do
            echo -e "  $((i+1)). ${FIX_COMMANDS[$i]}"
        done
        echo ""
        echo -e "${BOLD}Quick fix all:${RESET}"
        echo -e "  ${CYAN}chittycheck --fix${RESET}"
    else
        echo -e "${GREEN}✅ Attempted to fix ${#FIX_COMMANDS[@]} issues automatically${RESET}"
    fi
    echo ""
fi

# Show warnings if any
if [ ${#WARNINGS[@]} -gt 0 ]; then
    echo -e "${YELLOW}${BOLD}⚠️  WARNINGS (${#WARNINGS[@]})${RESET}"
    echo "────────────────────────"
    for warning in "${WARNINGS[@]}"; do
        echo -e "  • $warning"
    done
    echo ""
fi

# Show successes
if [ "$VERBOSE" = true ] && [ ${#SUCCESS_ITEMS[@]} -gt 0 ]; then
    echo -e "${GREEN}${BOLD}✅ PASSED CHECKS (${#SUCCESS_ITEMS[@]})${RESET}"
    echo "────────────────────────"
    for item in "${SUCCESS_ITEMS[@]}"; do
        echo -e "  • $item"
    done
    echo ""
fi

# ============================================
# RECOMMENDATIONS
# ============================================
echo -e "${CYAN}${BOLD}💡 RECOMMENDATIONS${RESET}"
echo "────────────────────────"

if [ $PERCENTAGE -lt 80 ]; then
    echo -e "  1. Run ${CYAN}chittycheck --fix${RESET} to auto-fix common issues"
fi

if [ "$LOCAL_ID_COUNT" -gt 0 ]; then
    echo -e "  2. Replace local ID generation with ChittyID service"
    echo -e "     ${DIM}See: https://id.chitty.cc/docs${RESET}"
fi

if [ "$SECRET_COUNT" -gt 0 ]; then
    echo -e "  3. Move hardcoded secrets to .env file"
    echo -e "     ${DIM}Use: grep -r 'api_key\\|password' . --include='*.js'${RESET}"
fi

if [ "$UNCOMMITTED" -gt 10 ]; then
    echo -e "  4. Commit your changes regularly"
    echo -e "     ${DIM}Run: git add -A && git commit -m 'Save work'${RESET}"
fi

echo ""

# ============================================
# NEXT STEPS
# ============================================
echo -e "${BOLD}📝 NEXT STEPS${RESET}"
echo "────────────────────────"

if [ "$STATUS" = "FAILED" ]; then
    echo -e "  ${RED}Critical issues detected. Address violations above.${RESET}"
    echo -e "  Run: ${CYAN}chittycheck --fix${RESET} for automatic fixes"
elif [ "$STATUS" = "PASSED WITH WARNINGS" ]; then
    echo -e "  ${YELLOW}Some issues detected. Review warnings above.${RESET}"
    echo -e "  Run: ${CYAN}chittycheck --fix${RESET} to improve compliance"
else
    echo -e "  ${GREEN}System healthy! Keep up the good work.${RESET}"
    echo -e "  Run: ${CYAN}chittycheck --qa${RESET} for deeper validation"
fi

echo ""
echo -e "${DIM}ChittyCheck v2.0 - Part of ChittyOS Framework${RESET}"
echo -e "${DIM}For help: chittycheck --help${RESET}"

# Exit with appropriate code
if [ "$STATUS" = "FAILED" ]; then
    exit 1
elif [ "$STATUS" = "PASSED WITH WARNINGS" ]; then
    exit 0
else
    exit 0
fi