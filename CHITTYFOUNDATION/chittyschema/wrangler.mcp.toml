# ChittySchema MCP Agent - Cloudflare Workers Configuration
# Deploys MCP-compliant agent for AI-powered evidence management

name = "chittyschema-mcp-agent"
main = "src/mcp-agent.ts"
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]
account_id = "bbf9fcd845e78035b7a135c481e88541" # ChittyCorp LLC

# AI Binding for intelligent operations
[ai]
binding = "AI"

# D1 Database for session state persistence
[[d1_databases]]
binding = "DB"
database_name = "chittyschema-mcp-state"
database_id = "chittyschema-mcp-db"

# KV Namespace for caching
[[kv_namespaces]]
binding = "CACHE"
id = "chittyschema-mcp-cache"

# R2 Bucket for evidence storage
[[r2_buckets]]
binding = "EVIDENCE_STORAGE"
bucket_name = "chittyschema-evidence"

# Durable Objects for state management
[[durable_objects.bindings]]
name = "MCP_STATE"
class_name = "ChittySchemaMCP"

# Environment Variables
[vars]
ENVIRONMENT = "production"
SERVICE_NAME = "ChittySchema MCP Agent"
VERSION = "2.0.0"

# ChittyOS Integration
CHITTYID_FOUNDATION_URL = "https://id.chitty.cc"
CHITTY_REGISTRY_URL = "https://registry.chitty.cc"
CHITTYVERIFY_SERVICE_URL = "https://verify.chitty.cc"
CHITTYCHECK_SERVICE_URL = "https://check.chitty.cc"

# MCP Configuration
MCP_PROTOCOL_VERSION = "1.0"
MCP_ENFORCE_FORMAT = "OFFICIAL" # VV-G-LLL-SSSS-T-YM-C-X only
MCP_BLOCK_LEGACY = "true" # Block CHITTY-* format

# AI Model Configuration
AI_MODEL_PRIMARY = "@cf/meta/llama-3.2-11b-vision-instruct"
AI_MODEL_REASONING = "@cf/google/gemma-3-12b-it"

# Session Management
SESSION_TIMEOUT = "3600" # 1 hour
HEARTBEAT_INTERVAL = "30" # 30 seconds

# Routes - MCP Portal Integration
[[routes]]
pattern = "portal.chitty.cc/schema/*"
zone_name = "chitty.cc"

[[routes]]
pattern = "mcp-schema.chitty.cc/*"
zone_name = "chitty.cc"

[[routes]]
pattern = "schema-agent.chitty.cc/*"
zone_name = "chitty.cc"

# Development Environment
[env.development]
[env.development.vars]
ENVIRONMENT = "development"
LOG_LEVEL = "DEBUG"
MCP_DEBUG = "true"

# Staging Environment
[env.staging]
[env.staging.vars]
ENVIRONMENT = "staging"
LOG_LEVEL = "INFO"
MCP_DEBUG = "false"

[[env.staging.d1_databases]]
binding = "DB"
database_name = "chittyschema-mcp-state-staging"
database_id = "chittyschema-mcp-db-staging"

# Production Environment
[env.production]
[env.production.vars]
ENVIRONMENT = "production"
LOG_LEVEL = "WARN"
MCP_DEBUG = "false"
ENABLE_ANALYTICS = "true"

# ChittyID enforcement in production
CHITTYID_STRICT_MODE = "true"
BLOCK_LEGACY_FORMATS = "true"
ENFORCE_FOUNDATION_SERVICE = "true"

[[env.production.d1_databases]]
binding = "DB"
database_name = "chittyschema-mcp-state-prod"
database_id = "chittyschema-mcp-db-prod"

[[env.production.kv_namespaces]]
binding = "CACHE"
id = "chittyschema-mcp-cache-prod"

[[env.production.r2_buckets]]
binding = "EVIDENCE_STORAGE"
bucket_name = "chittyschema-evidence-prod"

# Analytics for production metrics
[[env.production.analytics_engine_datasets]]
binding = "ANALYTICS"
dataset = "chittyschema-mcp-metrics"

# Triggers for scheduled tasks
[[triggers.crons]]
cron = "*/5 * * * *"  # Every 5 minutes
route = "/mcp/heartbeat"

[[triggers.crons]]
cron = "0 * * * *"   # Every hour
route = "/mcp/cleanup"

[[triggers.crons]]
cron = "0 0 * * *"   # Daily at midnight
route = "/mcp/analytics"

# Build configuration
[build]
command = "npm run build"

# Limits for MCP operations
[limits]
cpu_ms = 50  # 50ms for MCP operations

# Placement for optimal performance
[placement]
mode = "smart"

# Secrets (to be set via wrangler secret put)
# CHITTY_ID_TOKEN - Authentication token for ChittyID Foundation service
# DATABASE_URL - PostgreSQL connection string for primary database
# NOTION_TOKEN - Notion API token for sync operations
# OPENAI_API_KEY - Optional OpenAI API key for enhanced AI operations