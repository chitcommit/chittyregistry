/**
 * ChittyID Foundation Service Client
 * Per Charter: All ChittyIDs must be generated by Foundation service
 * NO LOCAL GENERATION ALLOWED
 */
export type ChittyNamespace =
  | "PEO" // People
  | "PET" // Pets
  | "PROP" // Property
  | "PLACE" // Places
  | "AI" // AI Instances
  | "EVID" // Evidence
  | "FACT" // Facts
  | "CASE" // Cases
  | "USER"; // System Users

// Map namespaces to Foundation entity types
const NAMESPACE_TO_ENTITY_MAP: Record<ChittyNamespace, string> = {
  PEO: "PERSON",
  PET: "THING",
  PROP: "THING",
  PLACE: "LOCATION",
  AI: "THING",
  EVID: "THING",
  FACT: "THING",
  CASE: "EVENT",
  USER: "PERSON",
};

/**
 * Request ChittyID from Foundation service (Foundation generates it)
 * @param namespace - The entity namespace
 * @param input - Unique identifier for the entity
 * @returns Promise<string> - ChittyID from Foundation service
 */
export async function chittyId(
  namespace: ChittyNamespace,
  input: string,
): Promise<string> {
  const foundationUrl =
    process.env.CHITTYID_FOUNDATION_URL || "https://id.chitty.cc";
  const apiKey = process.env.CHITTY_ID_TOKEN || process.env.CHITTYID_API_KEY;

  if (!apiKey) {
    throw new Error("CHITTY_ID_TOKEN required for Foundation ChittyID service");
  }

  try {
    const response = await fetch(`${foundationUrl}/api/v2/chittyid/mint`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        entity: NAMESPACE_TO_ENTITY_MAP[namespace],
        name: input,
        format: "official", // ONLY use official VV-G-LLL-SSSS-T-YM-C-X format
        metadata: {
          namespace,
          source: "chittyschema",
          originalInput: input,
        },
      }),
    });

    if (!response.ok) {
      throw new Error(`Foundation ChittyID service error: ${response.status}`);
    }

    const result = await response.json();
    return result.chitty_id; // v2 API uses chitty_id field
  } catch (error) {
    console.error("Error calling Foundation ChittyID service:", error);
    throw new Error(
      "ChittyID generation requires Foundation service. Local generation is prohibited.",
    );
  }
}

/**
 * ABSOLUTE BLOCK: Validate ONLY official ChittyID format VV-G-LLL-SSSS-T-YM-C-X
 * @param id - The ChittyID to validate
 * @returns Promise<boolean> - Validation result from Foundation service
 */
export async function isValidChittyId(id: string): Promise<boolean> {
  const foundationUrl =
    process.env.CHITTYID_FOUNDATION_URL || "https://id.chitty.cc";
  const apiKey = process.env.CHITTY_ID_TOKEN || process.env.CHITTYID_API_KEY;

  // ABSOLUTE BLOCK: Reject any CHITTY-* format immediately
  if (id.startsWith("CHITTY-")) {
    throw new Error(
      "BLOCKED: CHITTY-* format is prohibited. Use official VV-G-LLL-SSSS-T-YM-C-X format only",
    );
  }

  // ONLY accept official format: VV-G-LLL-SSSS-T-YM-C-X
  const officialPattern =
    /^(CP|CL|CT|CE)-[A-Z0-9]-[A-Z0-9]{3}-[0-9]{4}-[PLTE]-[0-9]{4}-[A-Z]-[0-9]{2}$/;

  if (!officialPattern.test(id)) {
    return false;
  }

  // Use Foundation service for full validation if available
  if (apiKey) {
    try {
      const response = await fetch(`${foundationUrl}/api/v2/chittyid/verify`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({ chittyId: id }),
      });

      if (response.ok) {
        const result = await response.json();
        return result.valid;
      }
    } catch (error) {
      console.warn(
        "Foundation validation unavailable, using format check:",
        error,
      );
    }
  }

  // Fallback to format validation
  return simplePattern.test(id) || officialPattern.test(id);
}

/**
 * Legacy sync function for backward compatibility
 * @deprecated Use async chittyId() instead
 */
export function chittyIdSync(
  _namespace: ChittyNamespace,
  _input: string,
): string {
  throw new Error(
    "Synchronous ChittyID generation is prohibited. Use async chittyId() with Foundation service.",
  );
}

/**
 * Extract namespace from official ChittyID format VV-G-LLL-SSSS-T-YM-C-X
 * @param id - The ChittyID
 * @returns The namespace or null if invalid
 */
export function extractNamespace(id: string): ChittyNamespace | null {
  // ABSOLUTE BLOCK: Reject any CHITTY-* format immediately
  if (id.startsWith("CHITTY-")) {
    throw new Error(
      "BLOCKED: CHITTY-* format is prohibited. Use official VV-G-LLL-SSSS-T-YM-C-X format only",
    );
  }

  // Extract from official format VV-G-LLL-SSSS-T-YM-C-X
  // VV maps to entity types: CP=PERSON, CL=PLACE, CT=PROP, CE=EVNT
  const entityMap: Record<string, ChittyNamespace> = {
    CP: "PEO", // Person
    CL: "PLACE", // Location
    CT: "PROP", // Thing/Property
    CE: "EVNT", // Event
  };

  const match = id.match(/^(CP|CL|CT|CE)-/);
  if (!match) return null;

  return entityMap[match[1]] || null;
}

// Example usage (OFFICIAL FORMAT ONLY):
// chittyId('PROP', 'PIN:14-21-111-008-1006') -> 'CT-A-ABC-2024-T-0001-A-01'
// chittyId('PEO', 'john.doe@example.com') -> 'CP-B-DEF-2024-P-0002-B-02'
// chittyId('EVID', 'evidence-file.pdf') -> 'CT-C-GHI-2024-T-0003-C-03'
