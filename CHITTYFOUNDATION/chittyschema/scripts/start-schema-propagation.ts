#!/usr/bin/env tsx
/**
 * Start Schema Propagation Service
 *
 * Initializes and starts the schema propagation system that monitors
 * for registry changes and propagates them to other ChittyOS systems
 */

import { initializeSchemaPropagation, SchemaPropagationService } from '../src/platforms/macos/core/schema-propagation.js';
import { initializeServiceRegistry } from '../src/platforms/macos/core/service-registry.js';

async function startPropagationService() {
  console.log('üöÄ Starting ChittyOS Schema Propagation Service');
  console.log('=' .repeat(60));

  try {
    // 1. Initialize service registry first (connects to registry.chitty.cc)
    console.log('\nüì° Step 1: Initializing Service Registry');
    await initializeServiceRegistry();

    // 2. Initialize schema propagation system
    console.log('\nüîó Step 2: Initializing Schema Propagation');
    await initializeSchemaPropagation();

    // 3. Show propagation status
    console.log('\nüìä Step 3: Propagation Service Status');
    const service = SchemaPropagationService.getInstance();
    const stats = await service.getPropagationStats();

    console.log('Target Systems:');
    stats.targetSystems.forEach((system: string) => {
      console.log(`  üìã ${system}`);
    });

    console.log(`\nüîÑ Monitoring Status: ${stats.isRunning ? 'ACTIVE' : 'INACTIVE'}`);

    console.log('\nüìà Last 24 Hours:');
    Object.entries(stats.last24Hours).forEach(([status, data]) => {
      const typedData = data as { count: number; avgDuration?: number };
      console.log(`  ${status}: ${typedData.count} events (avg ${typedData.avgDuration ? typedData.avgDuration.toFixed(2) + 's' : 'N/A'})`);
    });

    // 4. Test propagation with a sample event
    console.log('\nüß™ Step 4: Testing Propagation System');
    try {
      await service.triggerManualPropagation('chitty-id-service', 'service_update');
      console.log('‚úÖ Test propagation event created successfully');
    } catch (error) {
      console.log('‚ö†Ô∏è Test propagation skipped (service may not exist yet)');
    }

    console.log('\n' + '='.repeat(60));
    console.log('üéâ SCHEMA PROPAGATION SERVICE ACTIVE');
    console.log('='.repeat(60));
    console.log('üîÑ Registry changes will now automatically propagate to:');
    console.log('  üìã ChittyOS Data Service');
    console.log('  üìã ChittyOS Auth Service');
    console.log('  üìã ChittyOS Trust Service');
    console.log('  üìã ChittyOS Monitoring');
    console.log('  üìã Local Notion Extension');
    console.log('  üìã Local Database');
    console.log('\nüí° Registry integration is now fully propagated across the ecosystem');

    // Keep the service running
    process.on('SIGINT', async () => {
      console.log('\nüõë Received SIGINT, shutting down gracefully...');
      await service.stop();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      console.log('\nüõë Received SIGTERM, shutting down gracefully...');
      await service.stop();
      process.exit(0);
    });

    // Keep process alive
    console.log('\n‚è∞ Service running... Press Ctrl+C to stop');
    await new Promise(() => {}); // Run forever

  } catch (error) {
    console.error('‚ùå Failed to start schema propagation service:', error);
    console.log('\nüí° Troubleshooting:');
    console.log('  1. Check DATABASE_URL environment variable');
    console.log('  2. Verify database schema is up to date');
    console.log('  3. Ensure registry.chitty.cc connectivity');
    console.log('  4. Check service authentication tokens');
    process.exit(1);
  }
}

// Run the service
if (import.meta.url === `file://${process.argv[1]}`) {
  startPropagationService().catch(console.error);
}

export { startPropagationService };